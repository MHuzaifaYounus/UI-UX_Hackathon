import { useEffect, useState } from "react";



// Component to display a paginated, filterable, and searchable product grid
const ProductGrid = ({ checkedCategories, searchInput }: { checkedCategories: string[], searchInput: string }) => {


  // State to hold the filtered list of products
  const [filteredProducts, setFilteredProducts] = useState<Food[]>([]);
  
  // State for pagination: current page and items per page
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [itemsPerPage, setItemsPerPage] = useState<number>(6);

  // Calculate the total number of pages based on filtered products
  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);

  // Function to handle pagination navigation
  const changeCurrentPage = (btnType: "Next" | "Prev") => {
    if (btnType === "Next" && currentPage < totalPages) {
      setCurrentPage((prev) => prev + 1); // Move to the next page
    } else if (btnType === "Prev" && currentPage > 1) {
      setCurrentPage((prev) => prev - 1); // Move to the previous page
    }
  };

  // Function to get the products for the current page
  const paginateProducts = () => {
    const startIndex = (currentPage - 1) * itemsPerPage; // Calculate start index
    const endIndex = startIndex + itemsPerPage;         // Calculate end index
    return filteredProducts.slice(startIndex, endIndex); // Return a slice of products for the current page
  };

  // Fetch data from Sanity and filter products based on category and search input
  useEffect(() => {
    async function getData() {
      const response: Food[] = await client.fetch(`*[_type == "food"]{
        name,
        category,
        price,
        originalPrice,
        tags,
        "image": image.asset->url,
        description,
        available,
        "slug": slug.current
      }`);

      // Filter logic: check both category and search input
      if (checkedCategories.length !== 0 || searchInput) {
        const filtered: Food[] = response.filter((e) => {
          // Check if the product matches any of the selected categories
          const matchesCategory = 
            checkedCategories.length === 0 || // If no categories are selected, all products match
            checkedCategories.some(
              (category) => category.toLowerCase() === e.category.toLowerCase()
            );
          
          // Check if the product matches the search input in name or tags
          const matchesSearch = 
            !searchInput || // If no search input, all products match
            e.name.toLowerCase().includes(searchInput.toLowerCase()) || // Match name
            e.tags.some((tag) => tag.toLowerCase().includes(searchInput.toLowerCase())); // Match tags
          
          // Include the product only if it matches both category and search criteria
          return matchesCategory && matchesSearch;
        });

        console.log(filtered); // Log the filtered results for debugging
        setFilteredProducts(filtered); // Update state with filtered products
      } else {
        setFilteredProducts(response); // If no filters, display all products
      }
    }
    getData();
  }, [checkedCategories, searchInput]); // Re-run effect when filters change

  // Reset to the first page whenever the filtered products list changes
  useEffect(() => {
    setCurrentPage(1);
  }, [filteredProducts]);

  return (
    <div className="p-4 w-[75%] max-lg:w-full">
      {/* Sort and Filter Options */}
      <div className="flex items-center mb-4 max-sm:w-full">
        <div>
          {/* Dropdown for sorting products */}
          <label className="mr-2 text-xl font-medium">Sort By:</label>
          <select className="border border-gray-300 rounded p-1 focus:ring-orange-300 w-[236px] h-[46px] max-sm:w-[136px] max-sm:h-[46px]">
            <option>Newest</option>
            <option>Price: Low to High</option>
            <option>Price: High to Low</option>
          </select>
        </div>
        <div className="pl-10 max-sm:pl-2">
          {/* Dropdown for changing items per page */}
          <label className="mr-2 text-xl font-medium">Show:</label>
          <select
            value={itemsPerPage}
            onChange={(e) => setItemsPerPage(Number(e.target.value))}
            className="border border-gray-300 rounded p-1 focus:ring-orange-300 w-[236px] h-[46px] max-sm:w-[136px] max-sm:h-[46px]"
          >
            <option value={6}>6 per page</option>
            <option value={12}>12 per page</option>
            <option value={24}>24 per page</option>
          </select>
        </div>
      </div>

      {/* Product Grid */}
      <div className="grid grid-cols-3 gap-4 max-md:grid-cols-2 max-sm:grid-cols-1">
        {paginateProducts().map((product, index) => (
          <Item key={index} product={product} /> // Render each product
        ))}
      </div>

      {/* Pagination Controls */}
      <div className="flex justify-center mt-6">
        {/* Previous Page Button */}
        <button
          onClick={() => changeCurrentPage("Prev")}
          disabled={currentPage === 1} // Disable if on the first page
          className={`px-3 py-1 mx-1 text-gray-500 bg-gray-100 rounded hover:bg-primary_color hover:text-white ${
            currentPage === 1 && "opacity-50 cursor-not-allowed"
          }`}
        >
          &lt;&lt;
        </button>
        {/* Page Indicator */}
        <span className="px-3 py-1 mx-1 text-gray-500 bg-gray-100 rounded">
          Page {currentPage} of {totalPages}
        </span>
        {/* Next Page Button */}
        <button
          onClick={() => changeCurrentPage("Next")}
          disabled={currentPage === totalPages} // Disable if on the last page
          className={`px-3 py-1 mx-1 text-gray-500 bg-gray-100 rounded hover:bg-primary_color hover:text-white ${
            currentPage === totalPages && "opacity-50 cursor-not-allowed"
          }`}
        >
          &gt;&gt;
        </button>
      </div>
    </div>
  );
};

export default ProductGrid;
